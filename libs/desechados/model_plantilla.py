# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kKjQo3SPzPgEL81LK1XqmPBOxK-Bv-Gd
"""

"""
El sistema esta pensado para que definas bloques Data_in, h0, h1, h2, h3... hn, Data_out.
De modo que en hardcode se definen que capas usar, pero la cantidad de neuronas de cada capa,
quedan libres para modificarlas cuando se llama constructor de la clase medinte el vector architecture. 
Despues, clases es un vector, donde los indices mapean a la label de lo que se quiere clasificar.
"""

import torch as torch
from torch import nn
from torchvision import datasets
from torchvision.transforms import ToTensor

class Modelo(nn.Module):
  def __init__(self, architecture, classes):
    super().__init__()
    #Variables de entorno
    self.architecture = architecture
    self.classes = classes
    #Capas de la arquitectura
    Data_in = architecture[0]
    h0 = architecture[1]
    Data_out = architecture[2]
    #Baloques de la red
    self.inPut = nn.Sequential( #bloque que recibe los datos y los acondiciona
        nn.Flatten()            #transforma la imagen en un chorizo de bits
    )
    self.h0 = nn.Sequential(    #primer bloque logico de la red
        nn.Linear(Data_in, h0), #Capa lineal
        nn.ReLU(),              #Activacion
    )
    self.out = nn.Sequential(   # bloque que acondiciona la salida
        nn.Linear(h0, Data_out), #Lineal que sale a las clases objetivo
        nn.Softmax( dim = 1)
            #Cambiamos la salida a una distribucion de probabilidad
    )

  def forward(self, x):
    prediccion = self.inPut(x)
    prediccion = self.h0(prediccion)
    prediccion = self.out(prediccion)
    return  prediccion
  def predict(self, input):
    """
    Esta funcion recibe un dato y genera una prediccion en forma de a que clase puede pertenecer

    Args:
      input: Tensor en el mismo dispositivo que el modelo
      WARNING: Asegurate de que tanto los datos como el modelo esten en el mismo dispositivo antes de llamar al metodo

    Returns:
      class_name: Nombre de la clase mas probable
      confidence: Probabilidad de la clase
    """
    self.eval()
    with torch.no_grad():
      prediction = self(input)[0]   #llamado a forward para obtener vector de probabilidades de clase
      index = prediction.argmax()   #obtenencion del indice de la clase mas probable
      class_name = self.classes[index]  #traduccion de indice a el nombre de la clase
      confidence = prediction[index]    #probabilidad de la clase elegida
    return class_name, confidence

  def _train_epoch(self, data_loader, optimizer, loss_fn, acuracy_fn):
      """
      + El data_loader debe retornar primero el input y segundo el target
      + El acuracy_fn debe retornar un vector convertible a tensoor
      """
      loss_acum = []
      accuracy_acum = []
      for input_batch, target_batch in data_loader:
        #prediccion y optimizacion
        self.train()
        prediccion = self(input_batch)
        loss = loss_fn(prediccion, target_batch)
        optimizdor.zero_grad()
        loss.backward()
        optimizdor.step()
        #metricas
        self.eval()
        with torch.no_grad():
          loss_acum.append(loss.item())
          accuracy_acum.append(acuracy_fn(prediccion, target_batch))  #accuracy_list.append((prediccion.argmax(dim=1) == targets).float().mean())
      return torch.tensor(loss_acum).mean() , torch.tensor(accuracy_acum).mean()

  def train(self, epochs, data_loader, optimizer, loss_fn, acuracy_fn):
    """
    """
    loss_list = []
    accuracy_list = []
    for epoch in range(epochs):
      loss, accuracy = self._train_epoch(data_loader, optimizer, loss_fn, acuracy_fn)
      loss_list.append(loss)
      accuracy_list.append(accuracy)
      print(f"Epoch {epoch} of {epochs} / Loss: {loss_list[-1]} / Accuracy: {accuracy_list[-1]}")
    return loss_list, accuracy_list
  def classes(self):
    """
    Devuelve una lista con las clases del modelo
    """
    return self.classes.copy()
  def architecture(self):
    """
    Devuelve una lista con la arquitectura del modelo
    """
    return self.architecture.copy()

def save_model(modelo, name):
  """
  Esta funcion guarda un modelo que se guardo con un formato específico, el cual corresponde a el state_dict de una red neuronal al que se le agrega un
  campo que indica la arquitectura de la red "architecture" y un campo que indica las clases del modelo "classes"

  Args:
    modelo: Modelo a guardar
    name: Nombre del archivo destino

  Returns:
    saveState: diccionario guardado en el archivo
  """
  saveState = modelo.state_dict()
  saveState['architecture'] = modelo.architecture()
  saveState['classes'] = modelo.classes()
  torch.save(saveState, name)
  return saveState

def load_model(name, constructor):
  """
  Esta funcion carga un modelo que se guardo con un formato específico, el cual corresponde a el state_dict de una red neuronal al que se le agrega un
  campo que indica la arquitectura de la red "architecture" y un campo que indica las clases del modelo "classes"

  Args:
    name: Nombre del archivo destino
    constructor: Constructor de la red neuronal que se va a cargar

  Returns:
    Modelo cargado
    Arquitectura del modelo cargado
    Clases del modelo cargado
    Parametros del modelo cargado
  """
  saveState = torch.load(name)
  architecture = saveState.pop('architecture')
  classes = saveState.pop('classes')
  modelo = constructor(architecture, classes)
  modelo.load_state_dict(saveState)
  return modelo, architecture, classes, saveState

